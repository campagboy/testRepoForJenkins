// Agent labels
def zOsAgentLabel = env.ZOS_AGENT_LABEL ? env.ZOS_AGENT_LABEL : 'PTHJCL1-Node'
def linuxAgent = 'PTHJCL1-Node'

// GIT repositories
def srcGitRepo =  null
def srcGitBranch = null

// DBB
def dbbHome=null
def dbbUrl=null
def dbbHlq=null
def dbbBuildType='-i'
def dbbGroovyzOpts= ''
def dbbBuildExtraOpts= ''
def dbbCredentialOptions='-id ADMIN -pw ADMIN'

// Verbose
def verbose = false

// Private
def hasBuildFiles = true
def idzCodeReviewFlag = false
def buildVerbose = ''

pipeline {

    agent { label linuxAgent }

    options { skipDefaultCheckout(true) }

    stages {
        
        stage('Git Clone/Refresh') {
            agent { label zOsAgentLabel }
            steps {
                script {
                    // Verbose
                    verbose = env.VERBOSE && env.VERBOSE == 'true' ? true : false
                    buildVerbose = verbose ? '-v' : ''
                    if ( verbose ) {
                        echo sh(script: 'env|sort', returnStdout: true)
                    }
                    
                    if ( env.DBB_HOME == null )
                        error("DBB_HOME is not defined !!!")
                    if ( env.DBB_URL == null )
                        error("DBB_URL is not defined !!!")
                    if ( env.DBB_HLQ == null )
                        error("DBB_HLQ is not defined !!!")
                    
                    dir('testProject') {
                        sh(script: 'rm -f .git/info/sparse-checkout', returnStdout: true)
                        srcGitRepo = scm.getUserRemoteConfigs()[0].getUrl()
                        srcGitBranch = scm.branches[0].name
                        def scmVars = null
                        scmVars = checkout([$class: 'GitSCM', branches: [[name: srcGitBranch]],
                                                doGenerateSubmoduleConfigurations: false,
                                                extensions: [
                                                [$class: 'SparseCheckoutPaths',
                                                   sparseCheckoutPaths:[[$class:'SparseCheckoutPath', 
                                                   path:'testProject/']]]
                                                ],
                                                submoduleCfg: [],
                                                userRemoteConfigs: [[
                                                                     url: srcGitRepo,
                                                                     ]]])
                    }
                }
            }
        }

        stage('DBB Build') {
            steps {
                script{
                    def zUnitContents = []
                    def cccFolder = null
                    node( zOsAgentLabel ) {
                        if ( env.DBB_BUILD_EXTRA_OPTS != null ) {
                           dbbBuildExtraOpts = env.DBB_BUILD_EXTRA_OPTS
                        }
                        if ( env.DBB_BUILD_TYPE != null ) {
                            dbbBuildType = env.DBB_BUILD_TYPE
                        }
                        if ( env.DBB_CREDENTIAL_OPTIONS != null ) {
                            dbbCredentialOptions = env.DBB_CREDENTIAL_OPTIONS
                        }
                        if ( env.GROOVYZ_BUILD_EXTRA_OPTS != null ) {
                            dbbGroovyzOpts = env.GROOVYZ_BUILD_EXTRA_OPTS
                        }
                        def dbbZunitCccOpts = ''
                        if ( env.CCC_HOST != null && env.CCC_PORT != null && env.CCC_FOLDER != null ) {
                            dbbZunitCccOpts="-cc -cch ${env.CCC_HOST} -ccp ${env.CCC_PORT}"
                            cccFolder = env.CCC_FOLDER
                        }
                    
                        dbbHome = env.DBB_HOME
                        dbbUrl = env.DBB_URL
                        dbbHlq = env.DBB_HLQ
                        sh "$dbbHome/bin/groovyz $dbbGroovyzOpts ${WORKSPACE}/testProject/testProject/build/build.groovy --logEncoding UTF-8 -w ${WORKSPACE} --application testProject --sourceDir ${WORKSPACE}/testProject  --workDir ${WORKSPACE}/BUILD-${BUILD_NUMBER} --hlq ${dbbHlq}.JCLEXP --url $dbbUrl $dbbCredentialOptions -d $dbbBuildType $buildVerbose $dbbZunitCccOpts $dbbBuildExtraOpts"
                        def files = findFiles(glob: "**BUILD-${BUILD_NUMBER}/**/buildList.txt")
                        // Do not enter into some steps if nothing in the build list
                        hasBuildFiles = files.length > 0 && files[0].length > 0
                        
                    }
                }
            }
            post {
                always {
                    node( zOsAgentLabel ) {
                        dir("${WORKSPACE}/BUILD-${BUILD_NUMBER}") {
                            archiveArtifacts allowEmptyArchive: true,
                                            artifacts: '**/*.log,**/*.json,**/*.html',
                                            excludes: '**/*clist',
                                            onlyIfSuccessful: false
                        }
                    }
                }

            }
        }
    }
}
